// <auto-generated />
using System;
using MagicCucaBakery.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MagicCucaBakery.API.Migrations
{
    [DbContext(typeof(MagicCucaBakeryContext))]
    partial class MagicCucaBakeryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("MagicCucaBakery.DataAccess.CoisaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Coisas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Banana"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alabarda"
                        });
                });

            modelBuilder.Entity("MagicCucaBakery.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Email = "",
                            FirstName = "Customer",
                            LastName = "Default",
                            PhoneNumber = ""
                        });
                });

            modelBuilder.Entity("MagicCucaBakery.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observation")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MagicCucaBakery.Domain.Entities.OrderProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Observation")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("MagicCucaBakery.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Description = "Classic cuca Banana with white chocolate, covered with sweet farofa",
                            Name = "Cuca - Banana with white chocolate",
                            Price = 25.0,
                            Weight = 2.0
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Description = "Cuca with strawberries, covered with sweet farofa",
                            Name = "Cuca - Strawberries",
                            Price = 27.0,
                            Weight = 2.0
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Description = "Cuca with dark chocolate, covered with sweet farofa",
                            Name = "Cuca - chocolate",
                            Price = 25.0,
                            Weight = 2.0
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Description = "Cuca special with classic Recife's desert and white chocolate, covered with sweet farofa",
                            Name = "Cuca - Bolo-de-Rolo",
                            Price = 30.0,
                            Weight = 2.5
                        });
                });

            modelBuilder.Entity("MagicCucaBakery.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PasswordChange")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "Admin",
                            Name = "Admin",
                            PasswordChange = true,
                            PasswordHash = "e3afed0047b08059d0fada10f400c1e5"
                        });
                });

            modelBuilder.Entity("MagicCucaBakery.Domain.Entities.Customer", b =>
                {
                    b.OwnsOne("MagicCucaBakery.Domain.Entities.CustomerAddress", "Address", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("City")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Complement")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Neighborhood")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Number")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PostalCode")
                                .HasColumnType("TEXT");

                            b1.Property<string>("State")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Street")
                                .HasColumnType("TEXT");

                            b1.HasKey("CustomerId");

                            b1.ToTable("Customers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });
                });

            modelBuilder.Entity("MagicCucaBakery.Domain.Entities.Order", b =>
                {
                    b.HasOne("MagicCucaBakery.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MagicCucaBakery.Domain.Entities.OrderProducts", b =>
                {
                    b.HasOne("MagicCucaBakery.Domain.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicCucaBakery.Domain.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
